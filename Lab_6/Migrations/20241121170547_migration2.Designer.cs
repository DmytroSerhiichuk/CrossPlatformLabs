// <auto-generated />
using System;
using Lab_6.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lab_6.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20241121170547_migration2")]
    partial class migration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lab_6.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookingStatusCode")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("date");

                    b.Property<string>("IsConfirmationLetterSent")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("IsPaymentReceived")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("VehicleRegNumber")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusCode");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleRegNumber");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookingStatusCode = "NEW",
                            CustomerId = 1,
                            DateFrom = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "ABC123"
                        },
                        new
                        {
                            Id = 2,
                            BookingStatusCode = "CON",
                            CustomerId = 2,
                            DateFrom = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "XYZ987"
                        },
                        new
                        {
                            Id = 3,
                            BookingStatusCode = "CAN",
                            CustomerId = 3,
                            DateFrom = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "LMN456"
                        },
                        new
                        {
                            Id = 4,
                            BookingStatusCode = "PEN",
                            CustomerId = 4,
                            DateFrom = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "PQR789"
                        },
                        new
                        {
                            Id = 5,
                            BookingStatusCode = "WAI",
                            CustomerId = 5,
                            DateFrom = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "DEF234"
                        },
                        new
                        {
                            Id = 6,
                            BookingStatusCode = "CON",
                            CustomerId = 6,
                            DateFrom = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "GHI567"
                        },
                        new
                        {
                            Id = 7,
                            BookingStatusCode = "COM",
                            CustomerId = 7,
                            DateFrom = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "ABC123"
                        },
                        new
                        {
                            Id = 8,
                            BookingStatusCode = "EXP",
                            CustomerId = 8,
                            DateFrom = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "XYZ987"
                        },
                        new
                        {
                            Id = 9,
                            BookingStatusCode = "NEW",
                            CustomerId = 9,
                            DateFrom = new DateTime(2024, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "LMN456"
                        },
                        new
                        {
                            Id = 10,
                            BookingStatusCode = "CAN",
                            CustomerId = 10,
                            DateFrom = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "PQR789"
                        },
                        new
                        {
                            Id = 11,
                            BookingStatusCode = "PEN",
                            CustomerId = 1,
                            DateFrom = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "DEF234"
                        },
                        new
                        {
                            Id = 12,
                            BookingStatusCode = "WAI",
                            CustomerId = 2,
                            DateFrom = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "GHI567"
                        },
                        new
                        {
                            Id = 13,
                            BookingStatusCode = "CON",
                            CustomerId = 3,
                            DateFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "ABC123"
                        },
                        new
                        {
                            Id = 14,
                            BookingStatusCode = "COM",
                            CustomerId = 4,
                            DateFrom = new DateTime(2025, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "XYZ987"
                        },
                        new
                        {
                            Id = 15,
                            BookingStatusCode = "EXP",
                            CustomerId = 5,
                            DateFrom = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "LMN456"
                        },
                        new
                        {
                            Id = 16,
                            BookingStatusCode = "WAI",
                            CustomerId = 6,
                            DateFrom = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "PQR789"
                        },
                        new
                        {
                            Id = 17,
                            BookingStatusCode = "PEN",
                            CustomerId = 7,
                            DateFrom = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "DEF234"
                        },
                        new
                        {
                            Id = 18,
                            BookingStatusCode = "NEW",
                            CustomerId = 8,
                            DateFrom = new DateTime(2025, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "GHI567"
                        },
                        new
                        {
                            Id = 19,
                            BookingStatusCode = "CAN",
                            CustomerId = 9,
                            DateFrom = new DateTime(2025, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "N",
                            IsPaymentReceived = "Y",
                            VehicleRegNumber = "ABC123"
                        },
                        new
                        {
                            Id = 20,
                            BookingStatusCode = "CON",
                            CustomerId = 10,
                            DateFrom = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateTo = new DateTime(2025, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsConfirmationLetterSent = "Y",
                            IsPaymentReceived = "N",
                            VehicleRegNumber = "XYZ987"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.BookingStatus", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("Code");

                    b.ToTable("BookingStatuses");

                    b.HasData(
                        new
                        {
                            Code = "NEW",
                            Description = "New"
                        },
                        new
                        {
                            Code = "CON",
                            Description = "Confirmed"
                        },
                        new
                        {
                            Code = "CAN",
                            Description = "Cancelled"
                        },
                        new
                        {
                            Code = "PEN",
                            Description = "Pending"
                        },
                        new
                        {
                            Code = "COM",
                            Description = "Completed"
                        },
                        new
                        {
                            Code = "WAI",
                            Description = "Waiting"
                        },
                        new
                        {
                            Code = "HOL",
                            Description = "On hold"
                        },
                        new
                        {
                            Code = "PAI",
                            Description = "Paid"
                        },
                        new
                        {
                            Code = "EXP",
                            Description = "Expired"
                        },
                        new
                        {
                            Code = "NOS",
                            Description = "No-show"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLine1 = "123 Elm St",
                            AddressLine2 = "Apt 4B",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Illinois",
                            Details = "Regular customer",
                            Email = "john.doe@example.com",
                            Gender = "M",
                            Name = "John Doe",
                            Phone = "123-456-7890",
                            Town = "Springfield"
                        },
                        new
                        {
                            Id = 2,
                            AddressLine1 = "456 Oak St",
                            AddressLine2 = "",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Connecticut",
                            Details = "VIP customer",
                            Email = "jane.smith@example.com",
                            Gender = "F",
                            Name = "Jane Smith",
                            Phone = "987-654-3210",
                            Town = "Greenwich"
                        },
                        new
                        {
                            Id = 3,
                            AddressLine1 = "789 Pine St",
                            AddressLine2 = "Suite 100",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Illinois",
                            Details = "Occasional customer",
                            Email = "michael.johnson@example.com",
                            Gender = "M",
                            Name = "Michael Johnson",
                            Phone = "555-123-4567",
                            Town = "Chicago"
                        },
                        new
                        {
                            Id = 4,
                            AddressLine1 = "101 Maple Ave",
                            AddressLine2 = "",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Massachusetts",
                            Details = "Loyal customer",
                            Email = "emily.brown@example.com",
                            Gender = "F",
                            Name = "Emily Brown",
                            Phone = "222-333-4444",
                            Town = "Boston"
                        },
                        new
                        {
                            Id = 5,
                            AddressLine1 = "202 Birch Rd",
                            AddressLine2 = "Unit 5",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "California",
                            Details = "First-time customer",
                            Email = "william.davis@example.com",
                            Gender = "M",
                            Name = "William Davis",
                            Phone = "444-555-6666",
                            Town = "Los Angeles"
                        },
                        new
                        {
                            Id = 6,
                            AddressLine1 = "303 Cedar Dr",
                            AddressLine2 = "Floor 3",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Florida",
                            Details = "Frequent traveler",
                            Email = "sophia.miller@example.com",
                            Gender = "F",
                            Name = "Sophia Miller",
                            Phone = "555-987-6543",
                            Town = "Miami"
                        },
                        new
                        {
                            Id = 7,
                            AddressLine1 = "404 Pinecrest Rd",
                            AddressLine2 = "",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Texas",
                            Details = "Preferred customer",
                            Email = "daniel.wilson@example.com",
                            Gender = "M",
                            Name = "Daniel Wilson",
                            Phone = "888-777-6666",
                            Town = "Dallas"
                        },
                        new
                        {
                            Id = 8,
                            AddressLine1 = "505 Birch St",
                            AddressLine2 = "Apartment 2A",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Texas",
                            Details = "Customer with VIP status",
                            Email = "olivia.garcia@example.com",
                            Gender = "F",
                            Name = "Olivia Garcia",
                            Phone = "666-555-4444",
                            Town = "Houston"
                        },
                        new
                        {
                            Id = 9,
                            AddressLine1 = "606 Willow Ln",
                            AddressLine2 = "",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "Washington",
                            Details = "New customer",
                            Email = "lucas.martinez@example.com",
                            Gender = "M",
                            Name = "Lucas Martinez",
                            Phone = "111-222-3333",
                            Town = "Seattle"
                        },
                        new
                        {
                            Id = 10,
                            AddressLine1 = "707 Redwood Ave",
                            AddressLine2 = "",
                            AddressLine3 = "",
                            Country = "USA",
                            County = "California",
                            Details = "Occasional customer",
                            Email = "ava.rodriguez@example.com",
                            Gender = "F",
                            Name = "Ava Rodriguez",
                            Phone = "777-888-9999",
                            Town = "San Francisco"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.Manufacturer", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(10)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Code");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Code = "FORD",
                            Details = "American multinational automaker",
                            Name = "Ford Motor Company"
                        },
                        new
                        {
                            Code = "TOYO",
                            Details = "Japanese multinational automotive manufacturer",
                            Name = "Toyota Motor Corporation"
                        },
                        new
                        {
                            Code = "HONDA",
                            Details = "Japanese multinational conglomerate known for manufacturing automobiles, motorcycles, and power equipment",
                            Name = "Honda Motor Co."
                        },
                        new
                        {
                            Code = "BMW",
                            Details = "German multinational company which produces luxury vehicles and motorcycles",
                            Name = "Bayerische Motoren Werke"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.Model", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(10)");

                    b.Property<decimal>("DailyHireRate")
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Code");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Code = "FIESTA",
                            DailyHireRate = 50.00m,
                            Name = "Ford Fiesta"
                        },
                        new
                        {
                            Code = "COROLLA",
                            DailyHireRate = 60.00m,
                            Name = "Toyota Corolla"
                        },
                        new
                        {
                            Code = "CIVIC",
                            DailyHireRate = 65.00m,
                            Name = "Honda Civic"
                        },
                        new
                        {
                            Code = "M3",
                            DailyHireRate = 120.00m,
                            Name = "BMW M3"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.Vehicle", b =>
                {
                    b.Property<string>("RegNumber")
                        .HasColumnType("char(10)");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("integer");

                    b.Property<decimal>("DailyHireRate")
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime>("DateMotDue")
                        .HasColumnType("date");

                    b.Property<string>("ManufacturerCode")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("VehicleCategoryCode")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.HasKey("RegNumber");

                    b.HasIndex("ManufacturerCode");

                    b.HasIndex("ModelCode");

                    b.HasIndex("VehicleCategoryCode");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            RegNumber = "ABC123",
                            CurrentMileage = 15000,
                            DailyHireRate = 50.00m,
                            DateMotDue = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerCode = "FORD",
                            ModelCode = "FIESTA",
                            VehicleCategoryCode = "ECON"
                        },
                        new
                        {
                            RegNumber = "XYZ987",
                            CurrentMileage = 25000,
                            DailyHireRate = 60.00m,
                            DateMotDue = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerCode = "TOYO",
                            ModelCode = "COROLLA",
                            VehicleCategoryCode = "ECON"
                        },
                        new
                        {
                            RegNumber = "LMN456",
                            CurrentMileage = 30000,
                            DailyHireRate = 65.00m,
                            DateMotDue = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerCode = "HONDA",
                            ModelCode = "CIVIC",
                            VehicleCategoryCode = "LUX"
                        },
                        new
                        {
                            RegNumber = "PQR789",
                            CurrentMileage = 12000,
                            DailyHireRate = 120.00m,
                            DateMotDue = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerCode = "BMW",
                            ModelCode = "M3",
                            VehicleCategoryCode = "LUX"
                        },
                        new
                        {
                            RegNumber = "DEF234",
                            CurrentMileage = 18000,
                            DailyHireRate = 80.00m,
                            DateMotDue = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerCode = "FORD",
                            ModelCode = "FIESTA",
                            VehicleCategoryCode = "SUV"
                        },
                        new
                        {
                            RegNumber = "GHI567",
                            CurrentMileage = 22000,
                            DailyHireRate = 110.00m,
                            DateMotDue = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ManufacturerCode = "TOYO",
                            ModelCode = "COROLLA",
                            VehicleCategoryCode = "VAN"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.VehicleCategory", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("char(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("Code");

                    b.ToTable("VehicleCategories");

                    b.HasData(
                        new
                        {
                            Code = "ECON",
                            Description = "Economy"
                        },
                        new
                        {
                            Code = "LUX",
                            Description = "Luxury"
                        },
                        new
                        {
                            Code = "SUV",
                            Description = "SUV"
                        },
                        new
                        {
                            Code = "VAN",
                            Description = "Van"
                        });
                });

            modelBuilder.Entity("Lab_6.Models.Booking", b =>
                {
                    b.HasOne("Lab_6.Models.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_6.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_6.Models.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("VehicleRegNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Lab_6.Models.Vehicle", b =>
                {
                    b.HasOne("Lab_6.Models.Manufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ManufacturerCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_6.Models.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_6.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");

                    b.Navigation("Model");

                    b.Navigation("VehicleCategory");
                });

            modelBuilder.Entity("Lab_6.Models.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lab_6.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lab_6.Models.Manufacturer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Lab_6.Models.Model", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Lab_6.Models.Vehicle", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lab_6.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
